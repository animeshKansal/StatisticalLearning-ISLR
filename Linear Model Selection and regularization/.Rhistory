summary(Hitters)
library('ISLR')
summary(Hitters)
with(Hitters,sum(is.na(Salary)))
Hitters=na.omit(Hitters)
with(Hitters,sum(is.na(Salary)))
Hitters=na.omit(Hitters)
with(Hitters,sum(is.na(Salary)))
Hitters=na.omit(Hitters)
with(Hitters,sum(is.na(Salary)))
library('ISLR')
summary(Hitters)
library('ISLR')
summary(Hitters)
with(Hitters,sum(is.na(Salary)))
Hitters=na.omit(Hitters)
with(Hitters,sum(is.na(Salary)))
library('ISLR')
summary(Hitters)
with(Hitters,sum(is.na(Salary)))
library('ISLR')
summary(Hitters)
with(Hitters,sum(is.na(Salary)))
Hitters=na.omit(Hitters)
with(Hitters,sum(is.na(Salary)))
library(leaps)
install.packages(leaps)
install.packages('leaps')
library('ISLR')
summary(Hitters)
with(Hitters,sum(is.na(Salary)))
Hitters=na.omit(Hitters)
with(Hitters,sum(is.na(Salary)))
library(leaps)
regit_full = regsubsets(Salary ~.,Hitters)
summary(regit_full)
regit_full = regsubsets(Salary ~.,Hitters,nvmax = 19)
regfit_full = regsubsets(Salary ~.,Hitters,nvmax = 19)
summary(regfit_full)
names(regfit_full)
names(summary(regfit_full))
regfit_full = regsubsets(Salary ~.,Hitters,nvmax = 19)
summary(regfit_full)
names(summary(regfit_full))
plot(summary(regfit_full)$cp,xlab="Number of variables",ylab = Cp)
summary(regfit_full)$cp
regfit_full = regsubsets(Salary ~.,Hitters,nvmax = 19)
summary(regfit_full)
names(summary(regfit_full))
plot(summary(regfit_full)$cp,xlab="Number of variables",ylab = 'Cp')
which.min(summary(regfit_full)$cp)
plot(regfit_full,scale = "cp")
plot(regfit_full,scale = "Cp")
coef(regfit_full,10)
plot(regfit_full,scale = "Cp")
coef(regfit_full,10)
plot(regfit_full,scale = "Cp")
coef(regfit_full,10)
regfit_Fwd = regsubsets(Salary ~., data = Hitters, nvmax = 19, method = "forward")
summary(regfit_Fwd)
plot(regfit_Fwd,scale="Cp")
dim(Hitters)
rep(0,19)
dim(Hitters)
set.seed(1)
train = sample(seq(263),180,replace=False)
dim(Hitters)
set.seed(1)
train = sample(seq(263),180,replace=FALSE)
train
regfit_Fwd = regsubsets(Salary~., data = Hitters[train,],nvmax = 19, method = 'forward')
x_test = model.matrix(Salary~.,data = Hitters[!train,])
Val_errors = rep(0,19)
x_test = model.matrix(Salary~.,data = Hitters[-train,])
for(i in 1:19){
coefi = coef(regfit_Fwd,id = i)
pred = x_test[,names(coefi)]%*%coefi
Val_errors[i] =mean((Hitters$Salary[-train]-pred)^2)
}
plot(sqrt(Val_errors),ylab = "RMSE", ylim= c(300,400),pch = 19, type = 'b')
points(sqrt(regfit_Fwd$rss[-1]/180),col = 'blue',pch = 10,  type = 'b')
dim(Hitters)
set.seed(1)
train = sample(seq(263),180,replace=FALSE)
train
regfit_Fwd = regsubsets(Salary~., data = Hitters[train,],nvmax = 19, method = 'forward')
Val_errors = rep(0,19)
x_test = model.matrix(Salary~.,data = Hitters[-train,])
for(i in 1:19){
coefi = coef(regfit_Fwd,id = i)
pred = x_test[,names(coefi)]%*%coefi
Val_errors[i] =mean((Hitters$Salary[-train]-pred)^2)
}
coef(regfit_Fwd,id=1)
coef(regfit_Fwd,id=2)
coef(regfit_Fwd,id=3)
Val_errors = rep(0,19)
x_test = model.matrix(Salary~.,data = Hitters[-train,])
for(i in 1:19){
coefi = coef(regfit_Fwd,id = i)
pred = x_test[,names(coefi)]%*%coefi
Val_errors[i] =mean((Hitters$Salary[-train]-pred)^2)
}
plot(sqrt(Val_errors),ylab = "RMSE", ylim= c(300,400),pch = 19, type = 'b')
points(sqrt(regfit_Fwd$rss[-1]/180),col = 'blue',pch = 10,  type = 'b')
legend("topright",legend=c("Training","Validation"),col=c("blue","black"),pch = 19)
predict_regsubsets = function(object,newdata,id,...){
form = as.formula(object$call[[2]])
mat = model.matrix(form,newdata)
coefi = coef(object,id = id)
mat[,namesh(coefi)]%*%coefi
}
set.seed(11)
folds = sample(rep(1:10,length(nrow(Hitters))))
folds
table(folds)
set.seed(11)
folds = sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
set.seed(11)
folds = sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv_errors = matrix(NA,10,19)
for(k in 1:10){
best_fit = regsubsets(Salary~.,data = Hitters[folds!=k],nvmax = 19,method = "forward")
for( i in 1:19){
pred = predict(best_fit,Hitters[folds==k,],id=i)
cv_errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2 )
}
}
set.seed(11)
folds = sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv_errors = matrix(NA,10,19)
for(k in 1:10){
best_fit = regsubsets(Salary~.,data = Hitters[folds!=k,],nvmax = 19,method = "forward")
for( i in 1:19){
pred = predict(best_fit,Hitters[folds==k,],id=i)
cv_errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2 )
}
}
predict_regsubsets = function(object,newdata,id,...){
form = as.formula(object$call[[2]])
mat = model.matrix(form,newdata)
coefi = coef(object,id = id)
mat[,namesh(coefi)]%*%coefi
}
predict = function(object,newdata,id,...){
form = as.formula(object$call[[2]])
mat = model.matrix(form,newdata)
coefi = coef(object,id = id)
mat[,namesh(coefi)]%*%coefi
}
set.seed(11)
folds = sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv_errors = matrix(NA,10,19)
for(k in 1:10){
best_fit = regsubsets(Salary~.,data = Hitters[folds!=k,],nvmax = 19,method = "forward")
for( i in 1:19){
pred = predict(best_fit,Hitters[folds==k,],id=i)
cv_errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2 )
}
}
predict = function(object,newdata,id,...){
form = as.formula(object$call[[2]])
mat = model.matrix(form,newdata)
coefi = coef(object,id = id)
mat[,names(coefi)]%*%coefi
}
set.seed(11)
folds = sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv_errors = matrix(NA,10,19)
for(k in 1:10){
best_fit = regsubsets(Salary~.,data = Hitters[folds!=k,],nvmax = 19,method = "forward")
for( i in 1:19){
pred = predict(best_fit,Hitters[folds==k,],id=i)
cv_errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2 )
}
}
rmse_cv = sqrt(apply(cv_errors,2,mean))
plot(rmse_cv,pch=19,type = 'b')
library(glmnet)
library(glmnet)
x = model.matrix(Salary~.,data = Hitters)
y = Hitters$Salary
x
x
x = model.matrix(Salary~.-1,data = Hitters)
x
y = Hitters$Salary
t
y
x
library(glmnet)
x = model.matrix(Salary~.-1,data = Hitters)
y = Hitters$Salary
fit_ridge = glmnet(x,y,alpha = 0)
plot(fit_ridge,xvar="Lambda",label= TRUE)
fit_ridge = glmnet(x,y,alpha = 0)
plot(fit_ridge,xvar="lambda",label= TRUE)
cv_ridge=cv.glmnet(x,y,alpha = 0)
plot(cv_ridge)
fit_lasso = glmnet(x,y)
plot(fit_lasso,xvar='lambda',label=TRUE)
fit_lasso = glmnet(x,y)
plot(fit_lasso,xvar='lambda')
plot(fit_lasso,xvar='lambda',label=TRUE)
plot(fit_lasso,xvar='lambda')
cv_lasso = cv.glmnet(x,y)
plot(cv_lasso)
cv_lasso = cv.glmnet(x,y)
plot(fit_lasso,xvar='lambda',label = TRUE)
plot(fit_ridge,xvar="lambda",label= TRUE)
coef(cv_lasso)
fit_ridge = glmnet(x,y,alpha = 0)
plot(fit_ridge,xvar="lambda",label= TRUE)
cv_ridge=cv.glmnet(x,y,alpha = 0)
plot(cv_ridge)
fit_lasso = glmnet(x,y)
plot(fit_lasso,xvar='lambda',label = TRUE)
cv_lasso = cv.glmnet(x,y)
plot(cv_lasso)
coef(cv_lasso)
lasso_train = glmnet(x[train,],y[train])
lasso_train
pred = predict(lasso_train,x[-train])
lasso_train = glmnet(x[train,],y[train])
lasso_train
pred = predict(lasso_train,x[-train,])
lasso_train = glmnet(x[train,],y[train])
lasso_train
pred = predict(lasso_train,x[-train,])
train
x[-train,]
nrow(x[-train,])
lasso_train
pred = predict(lasso_train,x[-train,])
library('ISLR')
summary(Hitters)
with(Hitters,sum(is.na(Salary)))
Hitters=na.omit(Hitters)
with(Hitters,sum(is.na(Salary)))
library(leaps)
regfit_full = regsubsets(Salary ~.,Hitters)
summary(regfit_full)
regfit_full = regsubsets(Salary ~.,Hitters,nvmax = 19)
summary(regfit_full)
names(summary(regfit_full))
plot(summary(regfit_full)$cp,xlab="Number of variables",ylab = 'Cp')
which.min(summary(regfit_full)$cp)
plot(regfit_full,scale = "Cp")
coef(regfit_full,10)
regfit_Fwd = regsubsets(Salary ~., data = Hitters, nvmax = 19, method = "forward")
summary(regfit_Fwd)
plot(regfit_Fwd,scale="Cp")
dim(Hitters)
set.seed(1)
train = sample(seq(263),180,replace=FALSE)
train
regfit_Fwd = regsubsets(Salary~., data = Hitters[train,],nvmax = 19, method = 'forward')
Val_errors = rep(0,19)
x_test = model.matrix(Salary~.,data = Hitters[-train,])
for(i in 1:19){
coefi = coef(regfit_Fwd,id = i)
pred = x_test[,names(coefi)]%*%coefi
Val_errors[i] =mean((Hitters$Salary[-train]-pred)^2)
}
plot(sqrt(Val_errors),ylab = "RMSE", ylim= c(300,400),pch = 19, type = 'b')
points(sqrt(regfit_Fwd$rss[-1]/180),col = 'blue',pch = 10,  type = 'b')
legend("topright",legend=c("Training","Validation"),col=c("blue","black"),pch = 19)
predict = function(object,newdata,id,...){
form = as.formula(object$call[[2]])
mat = model.matrix(form,newdata)
coefi = coef(object,id = id)
mat[,names(coefi)]%*%coefi
}
set.seed(11)
folds = sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv_errors = matrix(NA,10,19)
for(k in 1:10){
best_fit = regsubsets(Salary~.,data = Hitters[folds!=k,],nvmax = 19,method = "forward")
for( i in 1:19){
pred = predict(best_fit,Hitters[folds==k,],id=i)
cv_errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2 )
}
}
rmse_cv = sqrt(apply(cv_errors,2,mean))
plot(rmse_cv,pch=19,type = 'b')
library(glmnet)
x = model.matrix(Salary~.-1,data = Hitters)
y = Hitters$Salary
fit_ridge = glmnet(x,y,alpha = 0)
plot(fit_ridge,xvar="lambda",label= TRUE)
cv_ridge=cv.glmnet(x,y,alpha = 0)
plot(cv_ridge)
fit_lasso = glmnet(x,y)
plot(fit_lasso,xvar='lambda',label = TRUE)
cv_lasso = cv.glmnet(x,y)
plot(cv_lasso)
coef(cv_lasso)
lasso_train = glmnet(x[train,],y[train])
lasso_train
pred = predict(lasso_train,x[-train,])
predict(lasso_train,x[-train,])
x[-train,]
nrow(x[-train,])
lasso_train = glmnet(x[train,],y[train])
lasso_train
pred = predict(lasso_train,x[-train,])
pred = predict(glmnet(x[train,],y[train]),x[-train,])
rm(predict())
rm(predict
)
lasso_train = glmnet(x[train,],y[train])
lasso_train
pred = predict(lasso_train,x[-train,])
dim(pred)
library('ISLR')
summary(Hitters)
with(Hitters,sum(is.na(Salary)))
Hitters=na.omit(Hitters)
with(Hitters,sum(is.na(Salary)))
library(leaps)
regfit_full = regsubsets(Salary ~.,Hitters)
summary(regfit_full)
regfit_full = regsubsets(Salary ~.,Hitters,nvmax = 19)
summary(regfit_full)
names(summary(regfit_full))
plot(summary(regfit_full)$cp,xlab="Number of variables",ylab = 'Cp')
which.min(summary(regfit_full)$cp)
plot(regfit_full,scale = "Cp")
coef(regfit_full,10)
regfit_Fwd = regsubsets(Salary ~., data = Hitters, nvmax = 19, method = "forward")
summary(regfit_Fwd)
plot(regfit_Fwd,scale="Cp")
dim(Hitters)
set.seed(1)
train = sample(seq(263),180,replace=FALSE)
train
regfit_Fwd = regsubsets(Salary~., data = Hitters[train,],nvmax = 19, method = 'forward')
Val_errors = rep(0,19)
x_test = model.matrix(Salary~.,data = Hitters[-train,])
for(i in 1:19){
coefi = coef(regfit_Fwd,id = i)
pred = x_test[,names(coefi)]%*%coefi
Val_errors[i] =mean((Hitters$Salary[-train]-pred)^2)
}
plot(sqrt(Val_errors),ylab = "RMSE", ylim= c(300,400),pch = 19, type = 'b')
points(sqrt(regfit_Fwd$rss[-1]/180),col = 'blue',pch = 10,  type = 'b')
legend("topright",legend=c("Training","Validation"),col=c("blue","black"),pch = 19)
predict_regsubsets = function(object,newdata,id,...){
form = as.formula(object$call[[2]])
mat = model.matrix(form,newdata)
coefi = coef(object,id = id)
mat[,names(coefi)]%*%coefi
}
set.seed(11)
folds = sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv_errors = matrix(NA,10,19)
for(k in 1:10){
best_fit = regsubsets(Salary~.,data = Hitters[folds!=k,],nvmax = 19,method = "forward")
for( i in 1:19){
pred = predict_regsubsets(best_fit,Hitters[folds==k,],id=i)
cv_errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2 )
}
}
rmse_cv = sqrt(apply(cv_errors,2,mean))
plot(rmse_cv,pch=19,type = 'b')
library(glmnet)
x = model.matrix(Salary~.-1,data = Hitters)
y = Hitters$Salary
fit_ridge = glmnet(x,y,alpha = 0)
plot(fit_ridge,xvar="lambda",label= TRUE)
cv_ridge=cv.glmnet(x,y,alpha = 0)
plot(cv_ridge)
fit_lasso = glmnet(x,y)
plot(fit_lasso,xvar='lambda',label = TRUE)
cv_lasso = cv.glmnet(x,y)
plot(cv_lasso)
coef(cv_lasso)
lasso_train = glmnet(x[train,],y[train])
lasso_train
pred = predict(lasso_train,x[-train,])
dim(pred)
rmse = sqrt(apply((y[-train]-pred)^2,2,mean))
plot(log(lasso_train$lambda),rmse,type='b',xlab="Log(Lambda)")
lam_best = lasso_train$lambda[order(rmse)[1]]
lam_best
coef(lasso_train,s = lam_best)
