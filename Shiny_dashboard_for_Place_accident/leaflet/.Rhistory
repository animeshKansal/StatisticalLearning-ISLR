#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
#Specify the list of packages required for your project
list.of.packages <-
c("shiny","shinydashboard","leaflet","rgdal","dplyr","DT","lubridate","tidyr","sqldf")
#Check for the packages that are NOT installed in the system
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#Install the packages NOT installed in the system
if(length(new.packages)) install.packages(new.packages)
library(shiny)
library(shinydashboard)
library(leaflet)
library(rgdal)
library(dplyr)
library(DT)
library(lubridate)
library(tidyr)
library(sqldf)
library(leaflet.minicharts)
raw <- read.delim(file = "leaflet/Plane_Accidents.csv",sep = ";")
AccidentData <-  raw
# Add factor level
addNoLocation <- function(x){
if(is.factor(x)) return(factor(x, levels=c(levels(x), "No Location")))
return(x)
}
AccidentData <- as.data.frame(lapply(AccidentData, addNoLocation))
# Replace empty value with "No Location"
AccidentData$Location[AccidentData$Location == ""] <- "No Location"
AccidentData$Location <- tolower(AccidentData$Location)
Longitude_Table <- AccidentData %>%
group_by(Location) %>%
dplyr::summarize(Mean_Longitude = mean(Longitude, na.rm=TRUE))
Longitude_Table <- na.omit(Longitude_Table)
Longitude_Table <- Longitude_Table[!(Longitude_Table$Location == "no location"),]
Latitude_Table <- AccidentData %>%
group_by(Location) %>%
dplyr::summarize(Mean_Latitude = mean(Latitude, na.rm=TRUE))
Latitude_Table <- na.omit(Latitude_Table)
Latitude_Table <- Latitude_Table[!(Latitude_Table$Location == "no location"),]
AccidentData_2 <- sqldf("select * from AccidentData left join Latitude_Table on Latitude_Table.Location = AccidentData.Location ")
AccidentData_2 <- sqldf("select * from AccidentData_2 left join Longitude_Table on Longitude_Table.Location = AccidentData_2.Location ")
AccidentData_3 <- AccidentData_2
AccidentData_3$Latitude[is.na(AccidentData_3$Latitude)] <- AccidentData_3$Mean_Latitude[is.na(AccidentData_3$Latitude)]
AccidentData_3$Longitude[is.na(AccidentData_3$Longitude)] <- AccidentData_3$Mean_Longitude[is.na(AccidentData_3$Longitude)]
# Drop Meaningless columns
drops <- c("Mean_Longitude","Mean_Latitude","Location..35","Location..33","geo_point","Location")
AccidentData_3 <- AccidentData_3[ , !(names(AccidentData_3) %in% drops)]
# Remove NA latitude and longitude
AccidentData_3 <- AccidentData_3[!is.na(AccidentData_3$Latitude),]
AccidentData_3 <- AccidentData_3[!is.na(AccidentData_3$Longitude),]
AccidentData_3$Event.Date <- as.Date(AccidentData_3$Event.Date)
set.seed(40)
sample_data <- sample_n(AccidentData_3,0.01*(nrow(AccidentData_3)))
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "Accidents Dashboard "),
dashboardSidebar(
dateRangeInput(inputId = "Date_Range",label = "Date Range",
start  = min(sample_data$Event.Date),
end    = max(sample_data$Event.Date)),
sliderInput(inputId = "Sample_Size",label="Sample Size % (More than 5% can make your Rstudio Crash)",value = 1,min = 0,max = 100),
radioButtons(inputId = "Fatality",label = "Crash Type",
choices = c("Non-Fatal","Fatal","Overall"),selected = "Overall")
#radioButtons(inputId = "Fatality",label = "Fatality ?",
#            choices = c(TRUE,FALSE),selected = FALSE)
),
dashboardBody(
fluidRow(box(width = 12, leafletOutput(outputId = "mymap"))),
fluidRow(box(width = 12, dataTableOutput(outputId = "summary_table")))
)
)
server <- function(input, output) {
data_input <-  reactive({
set.seed(40)
sample_data <-
sample_n(AccidentData_3, input$Sample_Size * 0.01 * (nrow(AccidentData_3)))
if (input$Fatality == "Fatal") {
sample_data %>%
select(
Event.Date,
Total.Uninjured,
Country,
Total.Fatal.Injuries,
Injury.Severity,
Latitude,
Longitude
) %>%
filter(Event.Date >= input$Date_Range[1]) %>%
filter(Event.Date <= input$Date_Range[2]) %>%
filter(Injury.Severity != "Non-Fatal")  %>%
filter(Injury.Severity != "Incident")
}
else{
if(input$Fatality == "Overall"){
pal <- colorNumeric(c("red", "green", "blue"), 1:10)
sample_data %>%
select(
Event.Date,
Total.Uninjured,
Country,
Total.Fatal.Injuries,
Injury.Severity,
Latitude,
Longitude
) %>%
filter(Event.Date >= input$Date_Range[1]) %>%
filter(Event.Date <= input$Date_Range[2])
}
else {
sample_data %>%
select(
Event.Date,
Total.Uninjured,
Country,
Total.Fatal.Injuries,
Injury.Severity,
Latitude,
Longitude
) %>%
filter(Event.Date >= input$Date_Range[1]) %>%
filter(Event.Date <= input$Date_Range[2]) %>%
filter(Injury.Severity == "Non-Fatal" | Injury.Severity == "incident"  )
}
}
})
output$mymap <- renderLeaflet({
df <- data_input()
m <- leaflet(data = df) %>%
addTiles() %>%
addMarkers(lng = ~Longitude,
lat = ~Latitude,
popup = paste("Date", df$Event.Date, "<br>"#,
#"Fatality:", df$Fatality, "<br>",
#"Address:",df$Accident_location
))
m
})
DF_2 <- data.frame(rev(sort(round(prop.table(table(AccidentData_3$Broad.Phase.of.Flight))*100,2)))[1:5])
colnames(DF_2) <- c("Top 5 Boarding Phase during Accident", "Percetage")
output$summary_table <- renderDataTable(DF_2)
}
#
# m %>%
#   addMinicharts(
#     barplot(rev(sort(table(sample_data$Broad.Phase.of.Flight)))[1:3],horiz = TRUE)
#   )
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
#Specify the list of packages required for your project
list.of.packages <-
c("shiny","shinydashboard","leaflet","rgdal","dplyr","DT","lubridate","tidyr","sqldf")
#Check for the packages that are NOT installed in the system
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#Install the packages NOT installed in the system
if(length(new.packages)) install.packages(new.packages)
library(shiny)
library(shinydashboard)
library(leaflet)
library(rgdal)
library(dplyr)
library(DT)
library(lubridate)
library(tidyr)
library(sqldf)
library(leaflet.minicharts)
raw <- read.delim(file = "leaflet/Plane_Accidents.csv",sep = ";")
AccidentData <-  raw
# Add factor level
addNoLocation <- function(x){
if(is.factor(x)) return(factor(x, levels=c(levels(x), "No Location")))
return(x)
}
AccidentData <- as.data.frame(lapply(AccidentData, addNoLocation))
# Replace empty value with "No Location"
AccidentData$Location[AccidentData$Location == ""] <- "No Location"
AccidentData$Location <- tolower(AccidentData$Location)
Longitude_Table <- AccidentData %>%
group_by(Location) %>%
dplyr::summarize(Mean_Longitude = mean(Longitude, na.rm=TRUE))
Longitude_Table <- na.omit(Longitude_Table)
Longitude_Table <- Longitude_Table[!(Longitude_Table$Location == "no location"),]
Latitude_Table <- AccidentData %>%
group_by(Location) %>%
dplyr::summarize(Mean_Latitude = mean(Latitude, na.rm=TRUE))
Latitude_Table <- na.omit(Latitude_Table)
Latitude_Table <- Latitude_Table[!(Latitude_Table$Location == "no location"),]
AccidentData_2 <- sqldf("select * from AccidentData left join Latitude_Table on Latitude_Table.Location = AccidentData.Location ")
AccidentData_2 <- sqldf("select * from AccidentData_2 left join Longitude_Table on Longitude_Table.Location = AccidentData_2.Location ")
AccidentData_3 <- AccidentData_2
AccidentData_3$Latitude[is.na(AccidentData_3$Latitude)] <- AccidentData_3$Mean_Latitude[is.na(AccidentData_3$Latitude)]
AccidentData_3$Longitude[is.na(AccidentData_3$Longitude)] <- AccidentData_3$Mean_Longitude[is.na(AccidentData_3$Longitude)]
# Drop Meaningless columns
drops <- c("Mean_Longitude","Mean_Latitude","Location..35","Location..33","geo_point","Location")
AccidentData_3 <- AccidentData_3[ , !(names(AccidentData_3) %in% drops)]
# Remove NA latitude and longitude
AccidentData_3 <- AccidentData_3[!is.na(AccidentData_3$Latitude),]
AccidentData_3 <- AccidentData_3[!is.na(AccidentData_3$Longitude),]
AccidentData_3$Event.Date <- as.Date(AccidentData_3$Event.Date)
set.seed(40)
sample_data <- sample_n(AccidentData_3,0.01*(nrow(AccidentData_3)))
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "Accidents Dashboard "),
dashboardSidebar(
dateRangeInput(inputId = "Date_Range",label = "Date Range",
start  = min(sample_data$Event.Date),
end    = max(sample_data$Event.Date)),
sliderInput(inputId = "Sample_Size",label="Sample Size % (More than 5% can make your Rstudio Crash)",value = 1,min = 0,max = 100),
radioButtons(inputId = "Fatality",label = "Crash Type",
choices = c("Non-Fatal","Fatal","Overall"),selected = "Overall")
#radioButtons(inputId = "Fatality",label = "Fatality ?",
#            choices = c(TRUE,FALSE),selected = FALSE)
),
dashboardBody(
fluidRow(box(width = 12, leafletOutput(outputId = "mymap"))),
fluidRow(box(width = 12, dataTableOutput(outputId = "summary_table")))
)
)
server <- function(input, output) {
data_input <-  reactive({
set.seed(40)
sample_data <-
sample_n(AccidentData_3, input$Sample_Size * 0.01 * (nrow(AccidentData_3)))
if (input$Fatality == "Fatal") {
sample_data %>%
select(
Event.Date,
Total.Uninjured,
Country,
Total.Fatal.Injuries,
Injury.Severity,
Latitude,
Longitude
) %>%
filter(Event.Date >= input$Date_Range[1]) %>%
filter(Event.Date <= input$Date_Range[2]) %>%
filter(Injury.Severity != "Non-Fatal")  %>%
filter(Injury.Severity != "Incident")
}
else{
if(input$Fatality == "Overall"){
pal <- colorNumeric(c("red", "green", "blue"), 1:10)
sample_data %>%
select(
Event.Date,
Total.Uninjured,
Country,
Total.Fatal.Injuries,
Injury.Severity,
Latitude,
Longitude
) %>%
filter(Event.Date >= input$Date_Range[1]) %>%
filter(Event.Date <= input$Date_Range[2])
}
else {
sample_data %>%
select(
Event.Date,
Total.Uninjured,
Country,
Total.Fatal.Injuries,
Injury.Severity,
Latitude,
Longitude
) %>%
filter(Event.Date >= input$Date_Range[1]) %>%
filter(Event.Date <= input$Date_Range[2]) %>%
filter(Injury.Severity == "Non-Fatal" | Injury.Severity == "incident"  )
}
}
})
output$mymap <- renderLeaflet({
df <- data_input()
m <- leaflet(data = df) %>%
addTiles() %>%
addMarkers(lng = ~Longitude,
lat = ~Latitude,
popup = paste("Date", df$Event.Date, "<br>"#,
#"Fatality:", df$Fatality, "<br>",
#"Address:",df$Accident_location
))
m
})
DF_2 <- data.frame(rev(sort(round(prop.table(table(AccidentData_3$Broad.Phase.of.Flight))*100,2)))[1:5])
colnames(DF_2) <- c("Top 5 Boarding Phase during Accident", "Percetage")
output$summary_table <- renderDataTable(DF_2)
}
#
# m %>%
#   addMinicharts(
#     barplot(rev(sort(table(sample_data$Broad.Phase.of.Flight)))[1:3],horiz = TRUE)
#   )
# Run the application
shinyApp(ui = ui, server = server)
#Specify the list of packages required for your project
list.of.packages <-
c("shiny","shinydashboard","leaflet","rgdal","dplyr","DT","lubridate","tidyr","sqldf")
#Check for the packages that are NOT installed in the system
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#Install the packages NOT installed in the system
if(length(new.packages)) install.packages(new.packages)
#Specify the list of packages required for your project
list.of.packages <-
c("shiny","shinydashboard","leaflet","rgdal","dplyr","DT","lubridate","tidyr","sqldf")
#Check for the packages that are NOT installed in the system
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#Install the packages NOT installed in the system
if(length(new.packages)) install.packages(new.packages)
library(shiny)
library(shinydashboard)
library(leaflet)
library(rgdal)
library(dplyr)
library(DT)
library(lubridate)
library(tidyr)
library(sqldf)
library(leaflet.minicharts)
raw <- read.delim(file = "leaflet/Plane_Accidents.csv",sep = ";")
